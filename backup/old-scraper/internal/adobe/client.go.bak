package adobe

import (
	"crypto/tls"
	"fmt"
	"io"
	"math/rand"
	"net"
	"net/http"
	"strings"
	"time"
)

// Client represents an HTTP client configured for Adobe scraping with CDN evasion
type Client struct {
	httpClient  *http.Client
	userAgents  []string
	rateLimit   time.Duration
	lastRequest time.Time
}

// NewClient creates a new Adobe HTTP client with CDN evasion
func NewClient(userAgent string, timeout time.Duration, rateLimit time.Duration) *Client {
	// Realistic browser user agents - rotate to avoid detection
	userAgents := []string{
		"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
		"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
		"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko/20100101 Firefox/122.0",
		"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:122.0) Gecko/20100101 Firefox/122.0",
		userAgent, // Include the original as one option
	}

	// Create transport with CDN-friendly settings
	transport := &http.Transport{
		DialContext: (&net.Dialer{
			Timeout:   20 * time.Second, // Longer timeout for CDN
			KeepAlive: 30 * time.Second,
		}).DialContext,
		TLSHandshakeTimeout:   15 * time.Second,
		ResponseHeaderTimeout: 60 * time.Second, // Much longer for CDN delays
		ExpectContinueTimeout: 2 * time.Second,
		MaxIdleConns:          5, // Fewer connections to appear less bot-like
		MaxIdleConnsPerHost:   1, // Only 1 connection per host
		IdleConnTimeout:       120 * time.Second,
		DisableCompression:    false,
		ForceAttemptHTTP2:     false, // HTTP/1.1 only to avoid stream issues

		// Mimic browser TLS fingerprint
		TLSClientConfig: &tls.Config{
			MinVersion: tls.VersionTLS12,
			MaxVersion: tls.VersionTLS13,
			CipherSuites: []uint16{
				tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
				tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
				tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,
				tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
			},
		},
	}

	client := &http.Client{
		Transport: transport,
		Timeout:   timeout,
	}

	return &Client{
		httpClient: client,
		userAgents: userAgents,
		rateLimit:  rateLimit,
	}
}

// Get performs an HTTP GET request with rate limiting
func (c *Client) Get(url string) (*http.Response, error) {
	// Rate limiting
	if !c.lastRequest.IsZero() {
		elapsed := time.Since(c.lastRequest)
		if elapsed < c.rateLimit {
			time.Sleep(c.rateLimit - elapsed)
		}
	}
	c.lastRequest = time.Now()

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("creating request: %w", err)
	}

	// Rotate user agent and add comprehensive browser headers to fool CDN
	userAgent := c.userAgents[rand.Intn(len(c.userAgents))]
	req.Header.Set("User-Agent", userAgent)
	req.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8")
	req.Header.Set("Accept-Language", "en-US,en;q=0.9")
	req.Header.Set("Accept-Encoding", "gzip, deflate, br")
	req.Header.Set("DNT", "1")
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Upgrade-Insecure-Requests", "1")
	req.Header.Set("Sec-Fetch-Dest", "document")
	req.Header.Set("Sec-Fetch-Mode", "navigate")
	req.Header.Set("Sec-Fetch-Site", "none")
	req.Header.Set("Sec-Fetch-User", "?1")
	req.Header.Set("Cache-Control", "max-age=0")

	// Add referer for non-root requests to simulate browsing
	if !strings.HasSuffix(req.URL.Path, "/") && req.URL.Path != "/security.html" {
		req.Header.Set("Referer", "https://helpx.adobe.com/security.html")
	}

	fmt.Printf("🌐 Making request to: %s\n", url)
	start := time.Now()

	resp, err := c.httpClient.Do(req)

	elapsed := time.Since(start)
	fmt.Printf("⏱️  Request completed in %v\n", elapsed)

	if err != nil {
		fmt.Printf("❌ Request failed: %v\n", err)
		return nil, fmt.Errorf("performing request: %w", err)
	}

	if resp == nil {
		fmt.Printf("❌ Response is nil\n")
		return nil, fmt.Errorf("nil response received")
	}

	fmt.Printf("📊 Response status: %s\n", resp.Status)
	fmt.Printf("🔧 Content-Type: %s\n", resp.Header.Get("Content-Type"))
	fmt.Printf("📏 Content-Length: %s\n", resp.Header.Get("Content-Length"))

	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		resp.Body.Close()
		return nil, fmt.Errorf("HTTP %d: %s", resp.StatusCode, resp.Status)
	}

	return resp, nil
}

// GetWithRetry performs an HTTP GET request with retry logic
func (c *Client) GetWithRetry(url string, maxRetries int) (*http.Response, error) {
	var lastErr error

	for attempt := 0; attempt <= maxRetries; attempt++ {
		if attempt > 0 {
			// Exponential backoff
			backoff := time.Duration(attempt) * time.Second
			time.Sleep(backoff)
		}

		resp, err := c.Get(url)
		if err == nil {
			return resp, nil
		}

		lastErr = err
	}

	return nil, fmt.Errorf("failed after %d attempts: %w", maxRetries+1, lastErr)
}

// GetBody performs an HTTP GET request and returns the response body as string
func (c *Client) GetBody(url string) (string, error) {
	resp, err := c.Get(url)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("reading response body: %w", err)
	}

	return string(body), nil
}

// GetBodyWithRetry performs an HTTP GET request with retry and returns the response body as string
func (c *Client) GetBodyWithRetry(url string, maxRetries int) (string, error) {
	resp, err := c.GetWithRetry(url, maxRetries)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("reading response body: %w", err)
	}

	return string(body), nil
}

// Close cleans up the client resources
func (c *Client) Close() {
	if c.httpClient != nil {
		c.httpClient.CloseIdleConnections()
	}
}
